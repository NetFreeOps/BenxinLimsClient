/* tslint:disable */
/* eslint-disable */
/**
 * 通用接口
 * 通用接口，针对权限、通用缓存、调度中心
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RESTfulResultInt32 } from '../models';
import { RESTfulResultListDbColumnInfo } from '../models';
import { RESTfulResultListObject } from '../models';
import { RESTfulResultListTemplateEntry } from '../models';
import { RESTfulResultListTemplateItemEntry } from '../models';
import { RESTfulResultString } from '../models';
import { TemplateEntry } from '../models';
import { TemplateItemEntry } from '../models';
/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取数据库表结构
         * @param {string} tablename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateDbfieldbytablenameTablenameGet: async (tablename: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tablename' is not null or undefined
            if (tablename === null || tablename === undefined) {
                throw new RequiredError('tablename','Required parameter tablename was null or undefined when calling apiTemplateDbfieldbytablenameTablenameGet.');
            }
            const localVarPath = `/api/template/dbfieldbytablename/{tablename}`
                .replace(`{${"tablename"}}`, encodeURIComponent(String(tablename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取SQL查询结果
         * @param {string} sql 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateSqlresultSqlGet: async (sql: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sql' is not null or undefined
            if (sql === null || sql === undefined) {
                throw new RequiredError('sql','Required parameter sql was null or undefined when calling apiTemplateSqlresultSqlGet.');
            }
            const localVarPath = `/api/template/sqlresult/{sql}`
                .replace(`{${"sql"}}`, encodeURIComponent(String(sql)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加模板
         * @param {TemplateEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTemplatePost: async (body?: TemplateEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/template/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新模板
         * @param {TemplateEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTemplatePut: async (body?: TemplateEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/template/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除模板
         * @param {string} templatename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTemplateTemplatenameDelete: async (templatename: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templatename' is not null or undefined
            if (templatename === null || templatename === undefined) {
                throw new RequiredError('templatename','Required parameter templatename was null or undefined when calling apiTemplateTemplateTemplatenameDelete.');
            }
            const localVarPath = `/api/template/template/{templatename}`
                .replace(`{${"templatename"}}`, encodeURIComponent(String(templatename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新模板分析
         * @param {TemplateItemEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTemplateitemPut: async (body?: TemplateItemEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/template/templateitem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取模板分项值
         * @param {string} [templatename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTemplateitemlistGet: async (templatename?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/template/templateitemlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (templatename !== undefined) {
                localVarQueryParameter['templatename'] = templatename;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 插入模板分析
         * @param {Array<TemplateItemEntry>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTemplateitemlistPut: async (body?: Array<TemplateItemEntry>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/template/templateitemlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询模板条件
         * @param {string} [templateName] 
         * @param {string} [templateType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateTemplatelistGet: async (templateName?: string, templateType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/template/templatelist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (templateName !== undefined) {
                localVarQueryParameter['templateName'] = templateName;
            }

            if (templateType !== undefined) {
                localVarQueryParameter['templateType'] = templateType;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取数据库表结构
         * @param {string} tablename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateDbfieldbytablenameTablenameGet(tablename: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultListDbColumnInfo>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateDbfieldbytablenameTablenameGet(tablename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取SQL查询结果
         * @param {string} sql 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateSqlresultSqlGet(sql: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultListObject>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateSqlresultSqlGet(sql, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加模板
         * @param {TemplateEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplatePost(body?: TemplateEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultInt32>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateTemplatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新模板
         * @param {TemplateEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplatePut(body?: TemplateEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultInt32>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateTemplatePut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除模板
         * @param {string} templatename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateTemplatenameDelete(templatename: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultInt32>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateTemplateTemplatenameDelete(templatename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新模板分析
         * @param {TemplateItemEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateitemPut(body?: TemplateItemEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateTemplateitemPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取模板分项值
         * @param {string} [templatename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateitemlistGet(templatename?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultListTemplateItemEntry>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateTemplateitemlistGet(templatename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 插入模板分析
         * @param {Array<TemplateItemEntry>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateitemlistPut(body?: Array<TemplateItemEntry>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateTemplateitemlistPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询模板条件
         * @param {string} [templateName] 
         * @param {string} [templateType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplatelistGet(templateName?: string, templateType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultListTemplateEntry>>> {
            const localVarAxiosArgs = await TemplateApiAxiosParamCreator(configuration).apiTemplateTemplatelistGet(templateName, templateType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取数据库表结构
         * @param {string} tablename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateDbfieldbytablenameTablenameGet(tablename: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultListDbColumnInfo>> {
            return TemplateApiFp(configuration).apiTemplateDbfieldbytablenameTablenameGet(tablename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取SQL查询结果
         * @param {string} sql 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateSqlresultSqlGet(sql: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultListObject>> {
            return TemplateApiFp(configuration).apiTemplateSqlresultSqlGet(sql, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加模板
         * @param {TemplateEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplatePost(body?: TemplateEntry, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultInt32>> {
            return TemplateApiFp(configuration).apiTemplateTemplatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新模板
         * @param {TemplateEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplatePut(body?: TemplateEntry, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultInt32>> {
            return TemplateApiFp(configuration).apiTemplateTemplatePut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除模板
         * @param {string} templatename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateTemplatenameDelete(templatename: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultInt32>> {
            return TemplateApiFp(configuration).apiTemplateTemplateTemplatenameDelete(templatename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新模板分析
         * @param {TemplateItemEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateitemPut(body?: TemplateItemEntry, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TemplateApiFp(configuration).apiTemplateTemplateitemPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取模板分项值
         * @param {string} [templatename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateitemlistGet(templatename?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultListTemplateItemEntry>> {
            return TemplateApiFp(configuration).apiTemplateTemplateitemlistGet(templatename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 插入模板分析
         * @param {Array<TemplateItemEntry>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplateitemlistPut(body?: Array<TemplateItemEntry>, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TemplateApiFp(configuration).apiTemplateTemplateitemlistPut(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询模板条件
         * @param {string} [templateName] 
         * @param {string} [templateType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateTemplatelistGet(templateName?: string, templateType?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultListTemplateEntry>> {
            return TemplateApiFp(configuration).apiTemplateTemplatelistGet(templateName, templateType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     * 
     * @summary 获取数据库表结构
     * @param {string} tablename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateDbfieldbytablenameTablenameGet(tablename: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultListDbColumnInfo>> {
        return TemplateApiFp(this.configuration).apiTemplateDbfieldbytablenameTablenameGet(tablename, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取SQL查询结果
     * @param {string} sql 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateSqlresultSqlGet(sql: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultListObject>> {
        return TemplateApiFp(this.configuration).apiTemplateSqlresultSqlGet(sql, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 添加模板
     * @param {TemplateEntry} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateTemplatePost(body?: TemplateEntry, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultInt32>> {
        return TemplateApiFp(this.configuration).apiTemplateTemplatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新模板
     * @param {TemplateEntry} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateTemplatePut(body?: TemplateEntry, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultInt32>> {
        return TemplateApiFp(this.configuration).apiTemplateTemplatePut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除模板
     * @param {string} templatename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateTemplateTemplatenameDelete(templatename: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultInt32>> {
        return TemplateApiFp(this.configuration).apiTemplateTemplateTemplatenameDelete(templatename, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新模板分析
     * @param {TemplateItemEntry} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateTemplateitemPut(body?: TemplateItemEntry, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TemplateApiFp(this.configuration).apiTemplateTemplateitemPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取模板分项值
     * @param {string} [templatename] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateTemplateitemlistGet(templatename?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultListTemplateItemEntry>> {
        return TemplateApiFp(this.configuration).apiTemplateTemplateitemlistGet(templatename, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 插入模板分析
     * @param {Array<TemplateItemEntry>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateTemplateitemlistPut(body?: Array<TemplateItemEntry>, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TemplateApiFp(this.configuration).apiTemplateTemplateitemlistPut(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 查询模板条件
     * @param {string} [templateName] 
     * @param {string} [templateType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public async apiTemplateTemplatelistGet(templateName?: string, templateType?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultListTemplateEntry>> {
        return TemplateApiFp(this.configuration).apiTemplateTemplatelistGet(templateName, templateType, options).then((request) => request(this.axios, this.basePath));
    }
}
