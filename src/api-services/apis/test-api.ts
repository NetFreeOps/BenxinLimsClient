/* tslint:disable */
/* eslint-disable */
/**
 * 通用接口
 * 通用接口，针对权限、通用缓存、调度中心
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RESTfulResultString } from '../models';
/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestItemToTestAnalysisnamePost: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiTestItemToTestAnalysisnamePost.');
            }
            const localVarPath = `/api/test/item-to-test/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestTestAnalysisnameDelete: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiTestTestAnalysisnameDelete.');
            }
            const localVarPath = `/api/test/test/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestTestAnalysisnamePost: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiTestTestAnalysisnamePost.');
            }
            const localVarPath = `/api/test/test/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestTestAnalysisnamePut: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiTestTestAnalysisnamePut.');
            }
            const localVarPath = `/api/test/test/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestTestListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/test/test-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestTestStatusAnalysisnamePut: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiTestTestStatusAnalysisnamePut.');
            }
            const localVarPath = `/api/test/test-status/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestItemToTestAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiTestItemToTestAnalysisnamePost(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiTestTestAnalysisnameDelete(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiTestTestAnalysisnamePost(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiTestTestAnalysisnamePut(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiTestTestListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestStatusAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await TestApiAxiosParamCreator(configuration).apiTestTestStatusAnalysisnamePut(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestItemToTestAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TestApiFp(configuration).apiTestItemToTestAnalysisnamePost(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TestApiFp(configuration).apiTestTestAnalysisnameDelete(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TestApiFp(configuration).apiTestTestAnalysisnamePost(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TestApiFp(configuration).apiTestTestAnalysisnamePut(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TestApiFp(configuration).apiTestTestListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestTestStatusAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return TestApiFp(configuration).apiTestTestStatusAnalysisnamePut(analysisname, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiTestItemToTestAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TestApiFp(this.configuration).apiTestItemToTestAnalysisnamePost(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiTestTestAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TestApiFp(this.configuration).apiTestTestAnalysisnameDelete(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiTestTestAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TestApiFp(this.configuration).apiTestTestAnalysisnamePost(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiTestTestAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TestApiFp(this.configuration).apiTestTestAnalysisnamePut(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiTestTestListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TestApiFp(this.configuration).apiTestTestListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public async apiTestTestStatusAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return TestApiFp(this.configuration).apiTestTestStatusAnalysisnamePut(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
}
