/* tslint:disable */
/* eslint-disable */
/**
 * 通用接口
 * 通用接口，针对权限、通用缓存、调度中心
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RESTfulResultString } from '../models';
/**
 * AnalysisApi - axios parameter creator
 * @export
 */
export const AnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisAnalysisAnalysisnameDelete: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiAnalysisAnalysisAnalysisnameDelete.');
            }
            const localVarPath = `/api/analysis/analysis/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisAnalysisAnalysisnamePost: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiAnalysisAnalysisAnalysisnamePost.');
            }
            const localVarPath = `/api/analysis/analysis/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisAnalysisAnalysisnamePut: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiAnalysisAnalysisAnalysisnamePut.');
            }
            const localVarPath = `/api/analysis/analysis/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisAnalysisListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/analysis/analysis-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisInsFromAnalysisAnalysisDelete: async (analysis: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysis' is not null or undefined
            if (analysis === null || analysis === undefined) {
                throw new RequiredError('analysis','Required parameter analysis was null or undefined when calling apiAnalysisInsFromAnalysisAnalysisDelete.');
            }
            const localVarPath = `/api/analysis/ins-from-analysis/{analysis}`
                .replace(`{${"analysis"}}`, encodeURIComponent(String(analysis)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisInsToAnalysisAnalysisPost: async (analysis: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysis' is not null or undefined
            if (analysis === null || analysis === undefined) {
                throw new RequiredError('analysis','Required parameter analysis was null or undefined when calling apiAnalysisInsToAnalysisAnalysisPost.');
            }
            const localVarPath = `/api/analysis/ins-to-analysis/{analysis}`
                .replace(`{${"analysis"}}`, encodeURIComponent(String(analysis)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisItemFromAnalysisAnalysisnameDelete: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiAnalysisItemFromAnalysisAnalysisnameDelete.');
            }
            const localVarPath = `/api/analysis/item-from-analysis/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisItemFromAnalysisAnalysisnamePut: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiAnalysisItemFromAnalysisAnalysisnamePut.');
            }
            const localVarPath = `/api/analysis/item-from-analysis/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisItemListFromAnalysisAnalysisnameGet: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiAnalysisItemListFromAnalysisAnalysisnameGet.');
            }
            const localVarPath = `/api/analysis/item-list-from-analysis/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisItemToAnalysisAnalysisnamePost: async (analysisname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisname' is not null or undefined
            if (analysisname === null || analysisname === undefined) {
                throw new RequiredError('analysisname','Required parameter analysisname was null or undefined when calling apiAnalysisItemToAnalysisAnalysisnamePost.');
            }
            const localVarPath = `/api/analysis/item-to-analysis/{analysisname}`
                .replace(`{${"analysisname"}}`, encodeURIComponent(String(analysisname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisUserFromAnalysisAnalysisDelete: async (analysis: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysis' is not null or undefined
            if (analysis === null || analysis === undefined) {
                throw new RequiredError('analysis','Required parameter analysis was null or undefined when calling apiAnalysisUserFromAnalysisAnalysisDelete.');
            }
            const localVarPath = `/api/analysis/user-from-analysis/{analysis}`
                .replace(`{${"analysis"}}`, encodeURIComponent(String(analysis)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisUserListFromAnalysisAnalysisGet: async (analysis: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysis' is not null or undefined
            if (analysis === null || analysis === undefined) {
                throw new RequiredError('analysis','Required parameter analysis was null or undefined when calling apiAnalysisUserListFromAnalysisAnalysisGet.');
            }
            const localVarPath = `/api/analysis/user-list-from-analysis/{analysis}`
                .replace(`{${"analysis"}}`, encodeURIComponent(String(analysis)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalysisUserToAnalysisAnalysisPost: async (analysis: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysis' is not null or undefined
            if (analysis === null || analysis === undefined) {
                throw new RequiredError('analysis','Required parameter analysis was null or undefined when calling apiAnalysisUserToAnalysisAnalysisPost.');
            }
            const localVarPath = `/api/analysis/user-to-analysis/{analysis}`
                .replace(`{${"analysis"}}`, encodeURIComponent(String(analysis)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalysisApi - functional programming interface
 * @export
 */
export const AnalysisApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisAnalysisAnalysisnameDelete(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisAnalysisAnalysisnamePost(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisAnalysisAnalysisnamePut(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisAnalysisListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisInsFromAnalysisAnalysisDelete(analysis: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisInsFromAnalysisAnalysisDelete(analysis, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisInsToAnalysisAnalysisPost(analysis: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisInsToAnalysisAnalysisPost(analysis, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemFromAnalysisAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisItemFromAnalysisAnalysisnameDelete(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemFromAnalysisAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisItemFromAnalysisAnalysisnamePut(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemListFromAnalysisAnalysisnameGet(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisItemListFromAnalysisAnalysisnameGet(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemToAnalysisAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisItemToAnalysisAnalysisnamePost(analysisname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisUserFromAnalysisAnalysisDelete(analysis: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisUserFromAnalysisAnalysisDelete(analysis, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisUserListFromAnalysisAnalysisGet(analysis: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisUserListFromAnalysisAnalysisGet(analysis, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisUserToAnalysisAnalysisPost(analysis: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await AnalysisApiAxiosParamCreator(configuration).apiAnalysisUserToAnalysisAnalysisPost(analysis, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnalysisApi - factory interface
 * @export
 */
export const AnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisAnalysisAnalysisnameDelete(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisAnalysisAnalysisnamePost(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisAnalysisAnalysisnamePut(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisAnalysisListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisAnalysisListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisInsFromAnalysisAnalysisDelete(analysis: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisInsFromAnalysisAnalysisDelete(analysis, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisInsToAnalysisAnalysisPost(analysis: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisInsToAnalysisAnalysisPost(analysis, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemFromAnalysisAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisItemFromAnalysisAnalysisnameDelete(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemFromAnalysisAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisItemFromAnalysisAnalysisnamePut(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemListFromAnalysisAnalysisnameGet(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisItemListFromAnalysisAnalysisnameGet(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisItemToAnalysisAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisItemToAnalysisAnalysisnamePost(analysisname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisUserFromAnalysisAnalysisDelete(analysis: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisUserFromAnalysisAnalysisDelete(analysis, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisUserListFromAnalysisAnalysisGet(analysis: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisUserListFromAnalysisAnalysisGet(analysis, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalysisUserToAnalysisAnalysisPost(analysis: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return AnalysisApiFp(configuration).apiAnalysisUserToAnalysisAnalysisPost(analysis, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalysisApi - object-oriented interface
 * @export
 * @class AnalysisApi
 * @extends {BaseAPI}
 */
export class AnalysisApi extends BaseAPI {
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisAnalysisAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisAnalysisAnalysisnameDelete(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisAnalysisAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisAnalysisAnalysisnamePost(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisAnalysisAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisAnalysisAnalysisnamePut(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisAnalysisListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisAnalysisListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisInsFromAnalysisAnalysisDelete(analysis: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisInsFromAnalysisAnalysisDelete(analysis, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisInsToAnalysisAnalysisPost(analysis: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisInsToAnalysisAnalysisPost(analysis, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisItemFromAnalysisAnalysisnameDelete(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisItemFromAnalysisAnalysisnameDelete(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisItemFromAnalysisAnalysisnamePut(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisItemFromAnalysisAnalysisnamePut(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisItemListFromAnalysisAnalysisnameGet(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisItemListFromAnalysisAnalysisnameGet(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysisname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisItemToAnalysisAnalysisnamePost(analysisname: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisItemToAnalysisAnalysisnamePost(analysisname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisUserFromAnalysisAnalysisDelete(analysis: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisUserFromAnalysisAnalysisDelete(analysis, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisUserListFromAnalysisAnalysisGet(analysis: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisUserListFromAnalysisAnalysisGet(analysis, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} analysis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalysisApi
     */
    public async apiAnalysisUserToAnalysisAnalysisPost(analysis: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return AnalysisApiFp(this.configuration).apiAnalysisUserToAnalysisAnalysisPost(analysis, options).then((request) => request(this.axios, this.basePath));
    }
}
