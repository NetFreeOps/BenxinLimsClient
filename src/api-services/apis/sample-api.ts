/* tslint:disable */
/* eslint-disable */
/**
 * 通用接口
 * 通用接口，针对权限、通用缓存、调度中心
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RESTfulResultString } from '../models';
/**
 * SampleApi - axios parameter creator
 * @export
 */
export const SampleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleActiveSampleSampleNumberPost: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleActiveSampleSampleNumberPost.');
            }
            const localVarPath = `/api/sample/active-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {string} auditgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleAuditSampleSampleNumberAuditgradePost: async (sampleNumber: string, auditgrade: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleAuditSampleSampleNumberAuditgradePost.');
            }
            // verify required parameter 'auditgrade' is not null or undefined
            if (auditgrade === null || auditgrade === undefined) {
                throw new RequiredError('auditgrade','Required parameter auditgrade was null or undefined when calling apiSampleAuditSampleSampleNumberAuditgradePost.');
            }
            const localVarPath = `/api/sample/audit-sample/{sample_number}/{auditgrade}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)))
                .replace(`{${"auditgrade"}}`, encodeURIComponent(String(auditgrade)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登记样品
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleLoginSampleSampleNumberPost: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleLoginSampleSampleNumberPost.');
            }
            const localVarPath = `/api/sample/login-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSamplePackageSampleSampleNumberPost: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSamplePackageSampleSampleNumberPost.');
            }
            const localVarPath = `/api/sample/package-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleReceiveSampleSampleNumberPost: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleReceiveSampleSampleNumberPost.');
            }
            const localVarPath = `/api/sample/receive-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleRejectSampleSampleNumberPost: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleRejectSampleSampleNumberPost.');
            }
            const localVarPath = `/api/sample/reject-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleRetainSampleSampleNumberPost: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleRetainSampleSampleNumberPost.');
            }
            const localVarPath = `/api/sample/retain-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleSampleSampleNumberPut: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleSampleSampleNumberPut.');
            }
            const localVarPath = `/api/sample/sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleSampleStatusSampleNumberPut: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleSampleStatusSampleNumberPut.');
            }
            const localVarPath = `/api/sample/sample-status/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleTestFromSampleSampleNumberDelete: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleTestFromSampleSampleNumberDelete.');
            }
            const localVarPath = `/api/sample/test-from-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSampleTestToSampleSampleNumberPost: async (sampleNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleNumber' is not null or undefined
            if (sampleNumber === null || sampleNumber === undefined) {
                throw new RequiredError('sampleNumber','Required parameter sampleNumber was null or undefined when calling apiSampleTestToSampleSampleNumberPost.');
            }
            const localVarPath = `/api/sample/test-to-sample/{sample_number}`
                .replace(`{${"sample_number"}}`, encodeURIComponent(String(sampleNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SampleApi - functional programming interface
 * @export
 */
export const SampleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleActiveSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleActiveSampleSampleNumberPost(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {string} auditgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleAuditSampleSampleNumberAuditgradePost(sampleNumber: string, auditgrade: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleAuditSampleSampleNumberAuditgradePost(sampleNumber, auditgrade, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 登记样品
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleLoginSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleLoginSampleSampleNumberPost(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSamplePackageSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSamplePackageSampleSampleNumberPost(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleReceiveSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleReceiveSampleSampleNumberPost(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleRejectSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleRejectSampleSampleNumberPost(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleRetainSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleRetainSampleSampleNumberPost(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleSampleSampleNumberPut(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleSampleSampleNumberPut(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleSampleStatusSampleNumberPut(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleSampleStatusSampleNumberPut(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleTestFromSampleSampleNumberDelete(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleTestFromSampleSampleNumberDelete(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleTestToSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultString>>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).apiSampleTestToSampleSampleNumberPost(sampleNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SampleApi - factory interface
 * @export
 */
export const SampleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleActiveSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleActiveSampleSampleNumberPost(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {string} auditgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleAuditSampleSampleNumberAuditgradePost(sampleNumber: string, auditgrade: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleAuditSampleSampleNumberAuditgradePost(sampleNumber, auditgrade, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 登记样品
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleLoginSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleLoginSampleSampleNumberPost(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSamplePackageSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSamplePackageSampleSampleNumberPost(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleReceiveSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleReceiveSampleSampleNumberPost(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleRejectSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleRejectSampleSampleNumberPost(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleRetainSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleRetainSampleSampleNumberPost(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleSampleSampleNumberPut(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleSampleSampleNumberPut(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleSampleStatusSampleNumberPut(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleSampleStatusSampleNumberPut(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleTestFromSampleSampleNumberDelete(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleTestFromSampleSampleNumberDelete(sampleNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sampleNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSampleTestToSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultString>> {
            return SampleApiFp(configuration).apiSampleTestToSampleSampleNumberPost(sampleNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SampleApi - object-oriented interface
 * @export
 * @class SampleApi
 * @extends {BaseAPI}
 */
export class SampleApi extends BaseAPI {
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleActiveSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleActiveSampleSampleNumberPost(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {string} auditgrade 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleAuditSampleSampleNumberAuditgradePost(sampleNumber: string, auditgrade: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleAuditSampleSampleNumberAuditgradePost(sampleNumber, auditgrade, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 登记样品
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleLoginSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleLoginSampleSampleNumberPost(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSamplePackageSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSamplePackageSampleSampleNumberPost(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleReceiveSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleReceiveSampleSampleNumberPost(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleRejectSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleRejectSampleSampleNumberPost(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleRetainSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleRetainSampleSampleNumberPost(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleSampleSampleNumberPut(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleSampleSampleNumberPut(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleSampleStatusSampleNumberPut(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleSampleStatusSampleNumberPut(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleTestFromSampleSampleNumberDelete(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleTestFromSampleSampleNumberDelete(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} sampleNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public async apiSampleTestToSampleSampleNumberPost(sampleNumber: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultString>> {
        return SampleApiFp(this.configuration).apiSampleTestToSampleSampleNumberPost(sampleNumber, options).then((request) => request(this.axios, this.basePath));
    }
}
