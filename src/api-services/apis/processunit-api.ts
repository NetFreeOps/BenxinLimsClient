/* tslint:disable */
/* eslint-disable */
/**
 * 通用接口
 * 通用接口，针对权限、通用缓存、调度中心
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ProcessUnitEntry } from '../models';
import { RESTfulResultInt32 } from '../models';
import { RESTfulResultListProcessUnitEntry } from '../models';
/**
 * ProcessunitApi - axios parameter creator
 * @export
 */
export const ProcessunitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 逻辑删除装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessunitProcessunitDelete: async (body?: ProcessUnitEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/processunit/processunit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取装置列表
         * @param {number} [id] 自增主键
         * @param {number} [parentId] 父装置ID，没有为0
         * @param {string} [name] 装置名
         * @param {string} [code] 装置代码
         * @param {number} [active] 是否激活
         * @param {string} [template] 装置模板
         * @param {string} [aliasName] 别名
         * @param {string} [workShop] 所属公司
         * @param {number} [isEnd] 是否是末端装置
         * @param {string} [createUser] 
         * @param {Date} [createTime] 
         * @param {string} [changeUser] 
         * @param {Date} [changeTime] 
         * @param {string} [deleted] 0为未删除，1为已删除
         * @param {string} [dataId] 数据权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessunitProcessunitGet: async (id?: number, parentId?: number, name?: string, code?: string, active?: number, template?: string, aliasName?: string, workShop?: string, isEnd?: number, createUser?: string, createTime?: Date, changeUser?: string, changeTime?: Date, deleted?: string, dataId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/processunit/processunit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            if (template !== undefined) {
                localVarQueryParameter['Template'] = template;
            }

            if (aliasName !== undefined) {
                localVarQueryParameter['AliasName'] = aliasName;
            }

            if (workShop !== undefined) {
                localVarQueryParameter['WorkShop'] = workShop;
            }

            if (isEnd !== undefined) {
                localVarQueryParameter['IsEnd'] = isEnd;
            }

            if (createUser !== undefined) {
                localVarQueryParameter['CreateUser'] = createUser;
            }

            if (createTime !== undefined) {
                localVarQueryParameter['CreateTime'] = (createTime as any instanceof Date) ?
                    (createTime as any).toISOString() :
                    createTime;
            }

            if (changeUser !== undefined) {
                localVarQueryParameter['ChangeUser'] = changeUser;
            }

            if (changeTime !== undefined) {
                localVarQueryParameter['ChangeTime'] = (changeTime as any instanceof Date) ?
                    (changeTime as any).toISOString() :
                    changeTime;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['Deleted'] = deleted;
            }

            if (dataId !== undefined) {
                localVarQueryParameter['DataId'] = dataId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessunitProcessunitPost: async (body?: ProcessUnitEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/processunit/processunit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProcessunitProcessunitPut: async (body?: ProcessUnitEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/processunit/processunit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessunitApi - functional programming interface
 * @export
 */
export const ProcessunitApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 逻辑删除装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitDelete(body?: ProcessUnitEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultInt32>>> {
            const localVarAxiosArgs = await ProcessunitApiAxiosParamCreator(configuration).apiProcessunitProcessunitDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取装置列表
         * @param {number} [id] 自增主键
         * @param {number} [parentId] 父装置ID，没有为0
         * @param {string} [name] 装置名
         * @param {string} [code] 装置代码
         * @param {number} [active] 是否激活
         * @param {string} [template] 装置模板
         * @param {string} [aliasName] 别名
         * @param {string} [workShop] 所属公司
         * @param {number} [isEnd] 是否是末端装置
         * @param {string} [createUser] 
         * @param {Date} [createTime] 
         * @param {string} [changeUser] 
         * @param {Date} [changeTime] 
         * @param {string} [deleted] 0为未删除，1为已删除
         * @param {string} [dataId] 数据权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitGet(id?: number, parentId?: number, name?: string, code?: string, active?: number, template?: string, aliasName?: string, workShop?: string, isEnd?: number, createUser?: string, createTime?: Date, changeUser?: string, changeTime?: Date, deleted?: string, dataId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultListProcessUnitEntry>>> {
            const localVarAxiosArgs = await ProcessunitApiAxiosParamCreator(configuration).apiProcessunitProcessunitGet(id, parentId, name, code, active, template, aliasName, workShop, isEnd, createUser, createTime, changeUser, changeTime, deleted, dataId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitPost(body?: ProcessUnitEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultInt32>>> {
            const localVarAxiosArgs = await ProcessunitApiAxiosParamCreator(configuration).apiProcessunitProcessunitPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitPut(body?: ProcessUnitEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RESTfulResultInt32>>> {
            const localVarAxiosArgs = await ProcessunitApiAxiosParamCreator(configuration).apiProcessunitProcessunitPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProcessunitApi - factory interface
 * @export
 */
export const ProcessunitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 逻辑删除装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitDelete(body?: ProcessUnitEntry, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultInt32>> {
            return ProcessunitApiFp(configuration).apiProcessunitProcessunitDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取装置列表
         * @param {number} [id] 自增主键
         * @param {number} [parentId] 父装置ID，没有为0
         * @param {string} [name] 装置名
         * @param {string} [code] 装置代码
         * @param {number} [active] 是否激活
         * @param {string} [template] 装置模板
         * @param {string} [aliasName] 别名
         * @param {string} [workShop] 所属公司
         * @param {number} [isEnd] 是否是末端装置
         * @param {string} [createUser] 
         * @param {Date} [createTime] 
         * @param {string} [changeUser] 
         * @param {Date} [changeTime] 
         * @param {string} [deleted] 0为未删除，1为已删除
         * @param {string} [dataId] 数据权限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitGet(id?: number, parentId?: number, name?: string, code?: string, active?: number, template?: string, aliasName?: string, workShop?: string, isEnd?: number, createUser?: string, createTime?: Date, changeUser?: string, changeTime?: Date, deleted?: string, dataId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultListProcessUnitEntry>> {
            return ProcessunitApiFp(configuration).apiProcessunitProcessunitGet(id, parentId, name, code, active, template, aliasName, workShop, isEnd, createUser, createTime, changeUser, changeTime, deleted, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitPost(body?: ProcessUnitEntry, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultInt32>> {
            return ProcessunitApiFp(configuration).apiProcessunitProcessunitPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新装置
         * @param {ProcessUnitEntry} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProcessunitProcessunitPut(body?: ProcessUnitEntry, options?: AxiosRequestConfig): Promise<AxiosResponse<RESTfulResultInt32>> {
            return ProcessunitApiFp(configuration).apiProcessunitProcessunitPut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessunitApi - object-oriented interface
 * @export
 * @class ProcessunitApi
 * @extends {BaseAPI}
 */
export class ProcessunitApi extends BaseAPI {
    /**
     * 
     * @summary 逻辑删除装置
     * @param {ProcessUnitEntry} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessunitApi
     */
    public async apiProcessunitProcessunitDelete(body?: ProcessUnitEntry, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultInt32>> {
        return ProcessunitApiFp(this.configuration).apiProcessunitProcessunitDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取装置列表
     * @param {number} [id] 自增主键
     * @param {number} [parentId] 父装置ID，没有为0
     * @param {string} [name] 装置名
     * @param {string} [code] 装置代码
     * @param {number} [active] 是否激活
     * @param {string} [template] 装置模板
     * @param {string} [aliasName] 别名
     * @param {string} [workShop] 所属公司
     * @param {number} [isEnd] 是否是末端装置
     * @param {string} [createUser] 
     * @param {Date} [createTime] 
     * @param {string} [changeUser] 
     * @param {Date} [changeTime] 
     * @param {string} [deleted] 0为未删除，1为已删除
     * @param {string} [dataId] 数据权限
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessunitApi
     */
    public async apiProcessunitProcessunitGet(id?: number, parentId?: number, name?: string, code?: string, active?: number, template?: string, aliasName?: string, workShop?: string, isEnd?: number, createUser?: string, createTime?: Date, changeUser?: string, changeTime?: Date, deleted?: string, dataId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultListProcessUnitEntry>> {
        return ProcessunitApiFp(this.configuration).apiProcessunitProcessunitGet(id, parentId, name, code, active, template, aliasName, workShop, isEnd, createUser, createTime, changeUser, changeTime, deleted, dataId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 添加装置
     * @param {ProcessUnitEntry} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessunitApi
     */
    public async apiProcessunitProcessunitPost(body?: ProcessUnitEntry, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultInt32>> {
        return ProcessunitApiFp(this.configuration).apiProcessunitProcessunitPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新装置
     * @param {ProcessUnitEntry} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessunitApi
     */
    public async apiProcessunitProcessunitPut(body?: ProcessUnitEntry, options?: AxiosRequestConfig) : Promise<AxiosResponse<RESTfulResultInt32>> {
        return ProcessunitApiFp(this.configuration).apiProcessunitProcessunitPut(body, options).then((request) => request(this.axios, this.basePath));
    }
}
